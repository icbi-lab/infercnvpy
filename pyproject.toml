[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]


[project]
name = "infercnvpy"
dynamic = ["version"]
description = "Infercnv is a scalable python library to infer copy number variation (CNV) events from single cell transcriptomics data. It is heavliy inspired by InferCNV, but plays nicely with scanpy and is much more scalable."
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
authors = [
    {name = "Gregor Sturm"},
]
maintainers = [
    {name = "Gregor Sturm", email="gregor.sturm@i-med.ac.at"}
]
urls.Documentation = "https://infercnvpy.readthedocs.io/"
urls.Source = "https://github.com/icbi-lab/infercnvpy"
urls.Home-page = "https://github.com/icbi-lab/infercnvpy"
dependencies = [
    'anndata>=0.7.3',
    'scanpy>=1.6.0',
    'pandas>=1',
    'numpy>=1.20', # includes type annotations
    'tqdm>=4.63.0', # fixes tqdm.auto
    'pytoml',
    'gtfparse>=2.1',
    'pycairo>=1.20; sys_platform == "win32"',
    'leidenalg',
    'pyreadr',
    # for debug logging (referenced from the issue template)
    "session-info",
    "ipython"
]

[project.optional-dependencies]
copykat = [
    'rpy2'
]
dev = [
    # CLI for managing the python project
    "pre-commit",
]
doc = [
    "docutils>=0.8,!=0.18.*,!=0.19.*",
    "sphinx>=4.2",
    "sphinx-book-theme>=1.0.0",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    "sphinxext-opengraph",
    # for tutorial
    "ipykernel",
    "sphinx-copybutton",
    'pycairo',
    'jupyter_client',
    "pandas",
]
test = [
    "pytest",
    "coverage",
]

[tool.hatch.version]
source = "vcs"

[tool.coverage.run]
source = ["infercnvpy"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    # "-Werror",  # if 3rd party libs raise DeprecationWarnings, just use filterwarnings below
    "--import-mode=importlib",  # allow using test files with same name
]
filterwarnings = [
    # "ignore:.*U.*mode is deprecated:DeprecationWarning",
]

[tool.black]
line-length = 120

[tool.ruff]
src = ["src"]
line-length = 120
select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
]
ignore = [
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # We want docstrings to start immediately after the opening triple quote
    "D213",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

[tool.cruft]
skip = [
    "tests",
    "src/**/__init__.py",
    "src/**/basic.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
    "docs/notebooks/example.ipynb"
]
